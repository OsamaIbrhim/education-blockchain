"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./services/admin.ts":
/*!***************************!*\
  !*** ./services/admin.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAdmin: function() { return /* binding */ addAdmin; },\n/* harmony export */   checkIsAdmin: function() { return /* binding */ checkIsAdmin; },\n/* harmony export */   checkIsInstitution: function() { return /* binding */ checkIsInstitution; },\n/* harmony export */   getAdminStats: function() { return /* binding */ getAdminStats; },\n/* harmony export */   getAllUsersByRole: function() { return /* binding */ getAllUsersByRole; },\n/* harmony export */   getDetailedUserData: function() { return /* binding */ getDetailedUserData; },\n/* harmony export */   getIdentityContract: function() { return /* binding */ getIdentityContract; },\n/* harmony export */   pauseContract: function() { return /* binding */ pauseContract; },\n/* harmony export */   removeAdmin: function() { return /* binding */ removeAdmin; },\n/* harmony export */   unpauseContract: function() { return /* binding */ unpauseContract; },\n/* harmony export */   updateUserRole: function() { return /* binding */ updateUserRole; },\n/* harmony export */   verifyAllPendingInstitutions: function() { return /* binding */ verifyAllPendingInstitutions; },\n/* harmony export */   verifyUser: function() { return /* binding */ verifyUser; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _constants_abis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/abis */ \"./constants/abis.ts\");\n/* harmony import */ var utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! utils/ethersConfig */ \"./utils/ethersConfig.ts\");\n/* harmony import */ var _utils_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/config */ \"./utils/config.ts\");\n/* harmony import */ var _examManagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./examManagement */ \"./services/examManagement.ts\");\n\n\n\n\n\n/**\r\n * Get the Identity contract instance\r\n * @param runner - Optional signer or provider\r\n * @returns The Identity contract instance\r\n */ const getIdentityContract = async (runner)=>{\n    var _process_env_NEXT_PUBLIC_IDENTITY_CONTRACT_ADDRESS;\n    const contractAddress = ((_process_env_NEXT_PUBLIC_IDENTITY_CONTRACT_ADDRESS = \"0x911E250f1398F007704D0F6A527a6a71560a3B93\") === null || _process_env_NEXT_PUBLIC_IDENTITY_CONTRACT_ADDRESS === void 0 ? void 0 : _process_env_NEXT_PUBLIC_IDENTITY_CONTRACT_ADDRESS.toString()) || (0,_utils_config__WEBPACK_IMPORTED_MODULE_2__.getConfig)(\"IDENTITY_CONTRACT_ADDRESS\");\n    const runnerInstance = runner || await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n    return new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(contractAddress, _constants_abis__WEBPACK_IMPORTED_MODULE_0__.IdentityABI, runnerInstance);\n};\n/**\r\n * Get all users by role\r\n * @param role - User role (1: Student, 2: Institution, 3: Employer, 4: Admin)\r\n * @returns Array of addresses with the specified role\r\n */ const getAllUsersByRole = async (role)=>{\n    try {\n        const provider = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n        const contract = await getIdentityContract(provider);\n        const addresses = await contract.getUsersByRole(role);\n        return addresses;\n    } catch (error) {\n        console.error(\"Error getting users by role:\", error);\n        return [];\n    }\n};\n/**\r\n * Get detailed user data\r\n * @param address - User address\r\n * @returns User data object or null if error occurs\r\n */ const getDetailedUserData = async (address)=>{\n    try {\n        const provider = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n        const contract = await getIdentityContract(provider);\n        const data = await contract.getUserData(address);\n        return {\n            userAddress: data[0],\n            ipfsHash: data[1],\n            role: data[2],\n            isVerified: data[3],\n            createdAt: new Date(Number(data[4]) * 1000)\n        };\n    } catch (error) {\n        console.error(\"Error getting user data:\", error);\n        return null;\n    }\n};\n/**\r\n * Verify a user (admin only)\r\n * @param userAddress - Address of the user to verify\r\n * @returns Result object with success status and transaction details\r\n */ const verifyUser = async (userAddress)=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const identityContract = await getIdentityContract(signer);\n        const examManagementContract = await (0,_examManagement__WEBPACK_IMPORTED_MODULE_3__.getExamManagementContract)(signer);\n        // Ensure caller is admin\n        const signerAddress = await signer.getAddress();\n        const isAdmin = await identityContract.isAdmin(signerAddress);\n        if (!isAdmin) {\n            return {\n                success: false,\n                message: \"Only admins can verify users\"\n            };\n        }\n        const examManagementTx = await examManagementContract.verifyInstitution(userAddress);\n        await examManagementTx.wait();\n        const identityTx = await identityContract.verifyUser(userAddress);\n        await identityTx.wait();\n        return {\n            success: true,\n            message: \"User verified successfully\",\n            examManagementHash: examManagementTx.hash,\n            identityHash: identityTx.hash\n        };\n    } catch (error) {\n        console.error(\"Error verifying user:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to verify user\"\n        };\n    }\n};\n/**\r\n * Add a new admin (owner only)\r\n * @param adminAddress - Address to add as admin\r\n * @returns Result object with success status and transaction details\r\n */ const addAdmin = async (adminAddress)=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        const tx = await contract.addAdmin(adminAddress);\n        await tx.wait();\n        return {\n            success: true,\n            message: \"Admin added successfully\",\n            hash: tx.hash\n        };\n    } catch (error) {\n        console.error(\"Error adding admin:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to add admin\"\n        };\n    }\n};\n/**\r\n * Remove an admin (owner only)\r\n * @param adminAddress - Address to remove from admin role\r\n * @returns Result object with success status and transaction details\r\n */ const removeAdmin = async (adminAddress)=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        const tx = await contract.removeAdmin(adminAddress);\n        await tx.wait();\n        return {\n            success: true,\n            message: \"Admin removed successfully\",\n            hash: tx.hash\n        };\n    } catch (error) {\n        console.error(\"Error removing admin:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to remove admin\"\n        };\n    }\n};\n/**\r\n * Check if an address is an admin\r\n * @param address - Address to check\r\n * @returns Boolean indicating if the address is an admin\r\n */ const checkIsAdmin = async (address)=>{\n    try {\n        const provider = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n        const contract = await getIdentityContract(provider);\n        return await contract.isAdmin(address);\n    } catch (error) {\n        console.error(\"Error checking admin status:\", error);\n        return false;\n    }\n};\n/**\r\n * Check if an address is an institution\r\n * @param address - Address to check\r\n * @returns Boolean indicating if the address is an institution\r\n */ const checkIsInstitution = async (address)=>{\n    try {\n        const provider = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n        const contract = await getIdentityContract(provider);\n        return await contract.isInstitution(address);\n    } catch (error) {\n        console.error(\"Error checking institution status:\", error);\n        return false;\n    }\n};\n/**\r\n * Update a user's role (admin only)\r\n * @param userAddress - Address of the user\r\n * @param newRole - New role to assign (1: Student, 2: Institution, 3: Employer)\r\n * @returns Result object with success status and transaction details\r\n */ const updateUserRole = async (userAddress, newRole)=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        // Ensure caller is admin\n        const signerAddress = await signer.getAddress();\n        const isAdmin = await contract.isAdmin(signerAddress);\n        if (!isAdmin) {\n            return {\n                success: false,\n                message: \"Only admins can update user roles\"\n            };\n        }\n        const tx = await contract.updateUserRole(userAddress, newRole);\n        await tx.wait();\n        return {\n            success: true,\n            message: \"User role updated successfully\",\n            hash: tx.hash\n        };\n    } catch (error) {\n        console.error(\"Error updating user role:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to update user role\"\n        };\n    }\n};\n/**\r\n * Pause the Identity contract (admin only)\r\n * @returns Result object with success status and transaction details\r\n */ const pauseContract = async ()=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        // Ensure caller is admin\n        const signerAddress = await signer.getAddress();\n        const isAdmin = await contract.isAdmin(signerAddress);\n        if (!isAdmin) {\n            return {\n                success: false,\n                message: \"Only admins can pause the contract\"\n            };\n        }\n        const tx = await contract.pause();\n        await tx.wait();\n        return {\n            success: true,\n            message: \"Contract paused successfully\",\n            hash: tx.hash\n        };\n    } catch (error) {\n        console.error(\"Error pausing contract:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to pause contract\"\n        };\n    }\n};\n/**\r\n * Unpause the Identity contract (admin only)\r\n * @returns Result object with success status and transaction details\r\n */ const unpauseContract = async ()=>{\n    try {\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        // Ensure caller is admin\n        const signerAddress = await signer.getAddress();\n        const isAdmin = await contract.isAdmin(signerAddress);\n        if (!isAdmin) {\n            return {\n                success: false,\n                message: \"Only admins can unpause the contract\"\n            };\n        }\n        const tx = await contract.unpause();\n        await tx.wait();\n        return {\n            success: true,\n            message: \"Contract unpaused successfully\",\n            hash: tx.hash\n        };\n    } catch (error) {\n        console.error(\"Error unpausing contract:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to unpause contract\"\n        };\n    }\n};\n/**\r\n * Verify all institutions that aren't verified yet\r\n * @returns Result object with success status and counts\r\n */ const verifyAllPendingInstitutions = async ()=>{\n    try {\n        const institutionAddresses = await getAllUsersByRole(2); // Role 2 is Institution\n        const signer = await (0,utils_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const contract = await getIdentityContract(signer);\n        // Ensure caller is admin\n        const signerAddress = await signer.getAddress();\n        const isAdmin = await contract.isAdmin(signerAddress);\n        if (!isAdmin) {\n            return {\n                success: false,\n                message: \"Only admins can perform batch verification\"\n            };\n        }\n        let verifiedCount = 0;\n        let failedCount = 0;\n        for (const address of institutionAddresses){\n            try {\n                const userData = await getDetailedUserData(address);\n                if (userData && !userData.isVerified) {\n                    const tx = await contract.verifyUser(address);\n                    await tx.wait();\n                    verifiedCount++;\n                }\n            } catch (error) {\n                console.error(\"Failed to verify institution \".concat(address, \":\"), error);\n                failedCount++;\n            }\n        }\n        return {\n            success: true,\n            message: \"Verified \".concat(verifiedCount, \" institutions. Failed: \").concat(failedCount),\n            verifiedCount,\n            failedCount\n        };\n    } catch (error) {\n        console.error(\"Error in batch verification:\", error);\n        return {\n            success: false,\n            message: error.message || \"Failed to perform batch verification\"\n        };\n    }\n};\n/**\r\n * Get admin dashboard statistics\r\n * @returns Statistics for the admin dashboard\r\n */ const getAdminStats = async ()=>{\n    try {\n        const students = await getAllUsersByRole(1); // Role 1 is Student\n        const institutions = await getAllUsersByRole(2); // Role 2 is Institution\n        const employers = await getAllUsersByRole(3); // Role 3 is Employer\n        const admins = await getAllUsersByRole(4); // Role 4 is Admin\n        return {\n            studentCount: students.length,\n            institutionCount: institutions.length,\n            employerCount: employers.length,\n            adminCount: admins.length,\n            totalUserCount: students.length + institutions.length + employers.length + admins.length\n        };\n    } catch (error) {\n        console.error(\"Error getting admin stats:\", error);\n        return {\n            studentCount: 0,\n            institutionCount: 0,\n            employerCount: 0,\n            adminCount: 0,\n            totalUserCount: 0\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/admin.ts\n"));

/***/ }),

/***/ "./utils/contracts.ts":
/*!****************************!*\
  !*** ./utils/contracts.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExam: function() { return /* binding */ createExam; },\n/* harmony export */   enrollStudent: function() { return /* binding */ enrollStudent; },\n/* harmony export */   getCertificates: function() { return /* binding */ getCertificates; },\n/* harmony export */   getContracts: function() { return /* binding */ getContracts; },\n/* harmony export */   getExam: function() { return /* binding */ getExam; },\n/* harmony export */   getExamResult: function() { return /* binding */ getExamResult; },\n/* harmony export */   getInstitutionExams: function() { return /* binding */ getInstitutionExams; },\n/* harmony export */   getOwnerAddress: function() { return /* binding */ getOwnerAddress; },\n/* harmony export */   getStudentExams: function() { return /* binding */ getStudentExams; },\n/* harmony export */   getUserRole: function() { return /* binding */ getUserRole; },\n/* harmony export */   isOwner: function() { return /* binding */ isOwner; },\n/* harmony export */   isVerifiedUser: function() { return /* binding */ isVerifiedUser; },\n/* harmony export */   issueCertificate: function() { return /* binding */ issueCertificate; },\n/* harmony export */   registerUser: function() { return /* binding */ registerUser; },\n/* harmony export */   submitExamResult: function() { return /* binding */ submitExamResult; },\n/* harmony export */   updateExamStatus: function() { return /* binding */ updateExamStatus; },\n/* harmony export */   verifyCertificate: function() { return /* binding */ verifyCertificate; },\n/* harmony export */   verifyInstitution: function() { return /* binding */ verifyInstitution; },\n/* harmony export */   verifyUser: function() { return /* binding */ verifyUser; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _constants_abis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants/abis */ \"./constants/abis.ts\");\n/* harmony import */ var _ethersConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ethersConfig */ \"./utils/ethersConfig.ts\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config */ \"./utils/config.ts\");\n/* harmony import */ var services_admin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! services/admin */ \"./services/admin.ts\");\n/* harmony import */ var services_examManagement__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! services/examManagement */ \"./services/examManagement.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n\n\n\n\n\n\n// Contract addresses from .env\nconst IDENTITY_CONTRACT_ADDRESS = \"0x911E250f1398F007704D0F6A527a6a71560a3B93\";\nconst CERTIFICATES_CONTRACT_ADDRESS = \"0xB5Afb0f327F7776Bff1fb9FB257eed8dC2336161\";\nconst EXAM_MANAGEMENT_CONTRACT_ADDRESS = \"0x37458DD5C9E778CF2e149E44f806D8C914bF1CE2\";\n// Role mapping with proper types\nconst USER_ROLES = {\n    NONE: 0,\n    STUDENT: 1,\n    INSTITUTION: 2,\n    EMPLOYER: 3\n};\nconst roleMap = {\n    [USER_ROLES.NONE]: \"none\",\n    [USER_ROLES.STUDENT]: \"student\",\n    [USER_ROLES.INSTITUTION]: \"institution\",\n    [USER_ROLES.EMPLOYER]: \"employer\"\n};\n// Validate environment variables\nif (!IDENTITY_CONTRACT_ADDRESS) {\n    console.error(\"NEXT_PUBLIC_IDENTITY_CONTRACT_ADDRESS is not set in .env\");\n}\nif (!CERTIFICATES_CONTRACT_ADDRESS) {\n    console.error(\"NEXT_PUBLIC_CERTIFICATES_CONTRACT_ADDRESS is not set in .env\");\n}\nconst getContracts = async ()=>{\n    try {\n        const provider = await (0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getProvider)();\n        const signer = await (0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getSigner)();\n        const identityContract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(IDENTITY_CONTRACT_ADDRESS, _constants_abis__WEBPACK_IMPORTED_MODULE_0__.IdentityABI, signer);\n        const certificatesContract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(CERTIFICATES_CONTRACT_ADDRESS, _constants_abis__WEBPACK_IMPORTED_MODULE_0__.CertificatesABI, signer);\n        const examManagementContract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_CONTRACT_ADDRESS, _constants_abis__WEBPACK_IMPORTED_MODULE_0__.ExamManagementABI, signer);\n        return {\n            identityContract,\n            certificatesContract,\n            examManagementContract,\n            provider,\n            signer\n        };\n    } catch (error) {\n        console.error(\"Error initializing contracts:\", error);\n        throw new Error(\"Failed to initialize contracts: \".concat(error.message));\n    }\n};\nconst registerUser = async (role)=>{\n    if (!role) {\n        throw new Error(\"Role is required\");\n    }\n    try {\n        // Error.1 missing revert data  \n        // const provider = await getProvider();\n        // solve error.1\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const identityAddress = (0,_config__WEBPACK_IMPORTED_MODULE_2__.getConfig)(\"IDENTITY_CONTRACT_ADDRESS\");\n        if (!identityAddress) {\n            throw new Error(\"Contract address is not configured\");\n        }\n        const identityContract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(identityAddress, _constants_abis__WEBPACK_IMPORTED_MODULE_0__.IdentityABI, signer);\n        // Convert role string to enum value\n        const roleMap = {\n            \"student\": 1,\n            \"institution\": 2,\n            \"employer\": 3\n        };\n        const roleValue = roleMap[role.toLowerCase()];\n        if (roleValue === undefined) {\n            throw new Error(\"Invalid role: \".concat(role, \". Must be one of: student, institution, employer\"));\n        }\n        const tx = await identityContract.registerUser(roleValue, \"\" /*, overrides*/ );\n        await tx.wait();\n        return {\n            status: \"success\"\n        };\n    } catch (error) {\n        console.error(\"Registration error:\", error);\n        throw error;\n    }\n};\nconst verifyUser = async (address)=>{\n    if (!address || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address)) {\n        throw new Error(\"Invalid address\");\n    }\n    try {\n        const { identityContract } = await getContracts();\n        return await identityContract.verifyUser(address);\n    } catch (error) {\n        console.error(\"Error verifying user:\", error);\n        throw new Error(error.message || \"Failed to verify user\");\n    }\n};\nconst getUserRole = async (address)=>{\n    if (!address || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address)) {\n        throw new Error(\"Invalid address\");\n    }\n    try {\n        const { identityContract } = await getContracts();\n        const roleValue = await identityContract.getUserRole(address);\n        return roleMap[roleValue] || \"none\";\n    } catch (error) {\n        console.error(\"Error getting user role:\", error);\n        return \"none\";\n    }\n};\nconst issueCertificate = async (studentAddress, ipfsHash)=>{\n    if (!studentAddress || !ipfsHash) {\n        throw new Error(\"Student address and IPFS hash are required\");\n    }\n    try {\n        const { certificatesContract } = await getContracts();\n        const tx = await certificatesContract.issueCertificate(studentAddress, ipfsHash);\n        await tx.wait();\n        return tx;\n    } catch (error) {\n        console.error(\"Error issuing certificate:\", error);\n        throw error;\n    }\n};\nconst verifyCertificate = async (certificateId)=>{\n    if (!certificateId) {\n        throw new Error(\"Certificate ID is required\");\n    }\n    try {\n        const { certificatesContract } = await getContracts();\n        const isValid = await certificatesContract.verifyCertificate(certificateId);\n        return isValid;\n    } catch (error) {\n        console.error(\"Error verifying certificate:\", error);\n        throw error;\n    }\n};\nconst getCertificates = async (address)=>{\n    if (!address || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address)) {\n        throw new Error(\"Invalid address\");\n    }\n    try {\n        console.log(\"Getting certificates for address:\", address);\n        const { certificatesContract } = await getContracts();\n        // Get certificate IDs first\n        console.log(\"Getting certificate IDs...\");\n        const certificateIds = await certificatesContract.getStudentCertificates(address);\n        console.log(\"Certificate IDs:\", certificateIds);\n        if (!certificateIds || certificateIds.length === 0) {\n            console.log(\"No certificates found\");\n            return [];\n        }\n        // Get details for each certificate\n        console.log(\"Getting certificate details...\");\n        const certificates = await Promise.all(certificateIds.map(async (id)=>{\n            const cert = await certificatesContract.verifyCertificate(id);\n            return {\n                id,\n                ipfsHash: cert.ipfsHash,\n                issuer: cert.institution,\n                timestamp: cert.issuedAt.toString(),\n                isValid: cert.isValid\n            };\n        }));\n        console.log(\"Certificate details:\", certificates);\n        return certificates;\n    } catch (error) {\n        console.error(\"Error in getCertificates:\", error);\n        if (error.reason) {\n            throw new Error(\"Contract error: \".concat(error.reason));\n        }\n        throw error;\n    }\n};\nconst isVerifiedUser = async (address)=>{\n    if (!address || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address)) {\n        throw new Error(\"Invalid address\");\n    }\n    try {\n        const { identityContract } = await getContracts();\n        return await identityContract.isVerifiedUser(address);\n    } catch (error) {\n        console.error(\"Error checking verification status:\", error);\n        throw error;\n    }\n};\n// Admin functions\nconst isOwner = async (address)=>{\n    if (!address || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(address)) {\n        throw new Error(\"Invalid address\");\n    }\n    try {\n        const { identityContract } = await getContracts();\n        const owner = await identityContract.owner();\n        // Add additional checks\n        if (!owner) {\n            console.warn(\"Owner address is null or undefined\");\n            return false;\n        }\n        return owner.toLowerCase() === address.toLowerCase();\n    } catch (error) {\n        console.error(\"Error checking owner status:\", error);\n        throw error;\n    }\n};\nconst verifyInstitution = async (institutionAddress)=>{\n    if (!institutionAddress || !(0,_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.getAddress)(institutionAddress)) {\n        throw new Error(\"Invalid institution address\");\n    }\n    try {\n        const identityContract = await (0,services_admin__WEBPACK_IMPORTED_MODULE_3__.getIdentityContract)();\n        const examManagementContract = await (0,services_examManagement__WEBPACK_IMPORTED_MODULE_4__.getExamManagementContract)();\n        // const identityTx = await identityContract.verifyUser(institutionAddress);\n        // await identityTx.wait();\n        const examManagementTx = await examManagementContract.verifyInstitution(institutionAddress);\n        await examManagementTx.wait();\n        return {\n            // identityHash: identityTx.hash,\n            examManagementHash: examManagementTx.hash\n        };\n    } catch (error) {\n        console.error(\"Error verifying institution:\", error);\n        throw error;\n    }\n};\nconst getOwnerAddress = async ()=>{\n    try {\n        const { identityContract } = await getContracts();\n        const owner = await identityContract.owner();\n        return owner;\n    } catch (error) {\n        console.error(\"Error getting owner address:\", error);\n        throw error;\n    }\n};\n// Add exam management contract address and ABI\nconst EXAM_MANAGEMENT_ADDRESS = process.env.NEXT_PUBLIC_EXAM_MANAGEMENT_ADDRESS || \"\";\nconst EXAM_MANAGEMENT_ABI = _constants_abis__WEBPACK_IMPORTED_MODULE_0__.ExamManagementABI;\n// Add exam management functions\nconst createExam = async (id, title, description, date, duration, ipfsHash)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, signer);\n        const tx = await contract.createExam(id, title, description, date, duration, ipfsHash);\n        await tx.wait();\n        return true;\n    } catch (error) {\n        console.error(\"Error creating exam:\", error);\n        throw error;\n    }\n};\nconst submitExamResult = async (examId, student, score, grade, ipfsHash)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, signer);\n        const tx = await contract.submitExamResult(examId, student, score, grade, ipfsHash);\n        await tx.wait();\n        return true;\n    } catch (error) {\n        console.error(\"Error submitting exam result:\", error);\n        throw error;\n    }\n};\nconst updateExamStatus = async (examId, status)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, signer);\n        const tx = await contract.updateExamStatus(examId, status);\n        await tx.wait();\n        return true;\n    } catch (error) {\n        console.error(\"Error updating exam status:\", error);\n        throw error;\n    }\n};\nconst getExam = async (examId)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, provider);\n        const exam = await contract.getExam(examId);\n        return exam;\n    } catch (error) {\n        console.error(\"Error getting exam:\", error);\n        throw error;\n    }\n};\nconst getExamResult = async (examId, student)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, provider);\n        const result = await contract.getExamResult(examId, student);\n        return result;\n    } catch (error) {\n        console.error(\"Error getting exam result:\", error);\n        throw error;\n    }\n};\nconst getInstitutionExams = async (institution)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, provider);\n        const exams = await contract.getInstitutionExams(institution);\n        return exams;\n    } catch (error) {\n        console.error(\"Error getting institution exams:\", error);\n        throw error;\n    }\n};\nconst getStudentExams = async (student)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, provider);\n        const exams = await contract.getStudentExams(student);\n        return exams;\n    } catch (error) {\n        console.error(\"Error getting student exams:\", error);\n        throw error;\n    }\n};\nconst enrollStudent = async (examId, studentAddress)=>{\n    try {\n        if (!window.ethereum) {\n            throw new Error(\"No ethereum provider found\");\n        }\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.JsonRpcProvider(_ethersConfig__WEBPACK_IMPORTED_MODULE_1__.EXPECTED_NETWORK.rpcUrl);\n        const signer = await provider.getSigner();\n        const contract = new ethers__WEBPACK_IMPORTED_MODULE_5__.ethers.Contract(EXAM_MANAGEMENT_ADDRESS, EXAM_MANAGEMENT_ABI, signer);\n        const tx = await contract.enrollStudent(examId, studentAddress);\n        await tx.wait();\n        return true;\n    } catch (error) {\n        console.error(\"Error enrolling student:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/contracts.ts\n"));

/***/ })

});