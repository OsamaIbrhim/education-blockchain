"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/dashboard/institution",{

/***/ "./hooks/useInstitution.ts":
/*!*********************************!*\
  !*** ./hooks/useInstitution.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useInstitution: function() { return /* binding */ useInstitution; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/.pnpm/react@18.3.1/node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/.pnpm/@chakra-ui+react@2.10.7_@emotion+react@11.14.0_@types+react@18.3.20_react@18.3.1__@emotion+st_tgigla7qwzpx5vn3b6i2n35rga/node_modules/@chakra-ui/react/dist/esm/index.mjs\");\n/* harmony import */ var _utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utilsFront/contracts */ \"./utilsFront/contracts.ts\");\n/* harmony import */ var wagmi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! wagmi */ \"./node_modules/.pnpm/wagmi@2.14.16_@tanstack+query-core@5.72.1_@tanstack+react-query@5.72.1_react@18.3.1__@types+r_hsye2nxu5nhyzf2bv6ii4shl2e/node_modules/wagmi/dist/esm/exports/index.js\");\n/* harmony import */ var _useContract__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useContract */ \"./hooks/useContract.ts\");\n\n\n\n\n\n// Add type for local storage\nconst INSTITUTION_STORAGE_KEY = \"institution_data\";\nconst EXAMS_STORAGE_KEY = \"institution_exams\";\nconst CERTIFICATES_STORAGE_KEY = \"institution_certificates\";\nconst useInstitution = ()=>{\n    const { examManagementContract, certificatesContract, isInitialized: contractsInitialized, isLoading: contractsLoading } = (0,_useContract__WEBPACK_IMPORTED_MODULE_2__.useContract)();\n    const { address = undefined, isConnected = false } = (0,wagmi__WEBPACK_IMPORTED_MODULE_3__.useAccount)() || {};\n    const toast = (0,_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.useToast)();\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [initializationAttempts, setInitializationAttempts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [institution, setInstitution] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [exams, setExams] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [certificates, setCertificates] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [hasAccess, setHasAccess] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [selectedExamResults, setSelectedExamResults] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [examStatistics, setExamStatistics] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const checkAccess = async (userAddress)=>{\n        // console.log('[CheckAccess] Starting access check for:', userAddress);\n        // if (!examManagementContract) {\n        //   console.error('[CheckAccess] Contract not initialized');\n        //   toast({ \n        //     title: 'Error',\n        //     description: 'Contract not initialized. Please try again.',\n        //     status: 'error'\n        //   });\n        //   return false;\n        // }\n        try {\n        //   console.log('[CheckAccess] Checking if address is institution...');\n        //   const isInstitutionResult = await examManagementContract.isInstitution(userAddress);\n        //   console.log('[CheckAccess] isInstitution result:', isInstitutionResult);\n        //   if (!isInstitutionResult) {\n        //     console.log('[CheckAccess] Address is not registered as institution');\n        //     toast({ \n        //       title: 'Error',\n        //       description: 'Address is not registered as an institution',\n        //       status: 'error'\n        //     });\n        //     return false;\n        //   }\n        //   console.log('[CheckAccess] Getting institution data...');\n        //   const institutionData = await examManagementContract.getInstitution(userAddress);\n        //   console.log('[CheckAccess] Institution data:', institutionData);\n        //   if (!institutionData || institutionData.length < 10) {\n        //     console.error('[CheckAccess] Invalid institution data received');\n        //     toast({ \n        //       title: 'Error',\n        //       description: 'Invalid institution data',\n        //       status: 'error'\n        //     });\n        //     return false;\n        //   }\n        //   const isVerified = Boolean(institutionData[9]);\n        //   console.log('[CheckAccess] Institution verification status:', isVerified);\n        //   if (!isVerified) {\n        //     toast({ \n        //       title: 'Error',\n        //       description: 'Institution is not verified',\n        //       status: 'error'\n        //     });\n        //     return false;\n        //   }\n        //   console.log('[CheckAccess] Access granted');\n        //   return true;\n        } catch (error) {\n            console.error(\"[CheckAccess] Error checking access:\", error);\n            toast({\n                title: \"Error\",\n                description: \"Error checking institution access\",\n                status: \"error\"\n            });\n            return false;\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        let initTimeout;\n        const initializeData = async ()=>{\n            try {\n                const initState = {\n                    isConnected,\n                    hasAddress: !!address,\n                    hasExamContract: !!examManagementContract,\n                    hasCertificatesContract: !!certificatesContract,\n                    contractsInitialized,\n                    contractsLoading,\n                    attempts: initializationAttempts\n                };\n                console.log(\"Institution initialization state:\", initState);\n                if (!isConnected || !address) {\n                    console.log(\"Not connected or no address available\");\n                    if (isMounted) {\n                        setIsLoading(false);\n                        setHasAccess(false);\n                        setIsInitialized(false);\n                    }\n                    return;\n                }\n                // Wait for contracts to finish loading\n                if (contractsLoading) {\n                    console.log(\"Contracts are still loading...\");\n                    return;\n                }\n                // Check contract initialization\n                if (!examManagementContract || !certificatesContract || !contractsInitialized) {\n                    console.error(\"Contract initialization check failed:\", {\n                        hasExamContract: !!examManagementContract,\n                        hasCertificatesContract: !!certificatesContract,\n                        isInitialized: contractsInitialized\n                    });\n                    if (isMounted) {\n                        setIsLoading(false);\n                        setHasAccess(false);\n                        setIsInitialized(false);\n                        // Retry initialization if under max attempts\n                        if (initializationAttempts < 3) {\n                            console.log(\"Scheduling retry attempt \".concat(initializationAttempts + 1, \"/3...\"));\n                            initTimeout = setTimeout(()=>{\n                                setInitializationAttempts((prev)=>prev + 1);\n                            }, 2000 * (initializationAttempts + 1)); // Exponential backoff\n                        } else {\n                            console.error(\"Max initialization attempts reached\");\n                            toast({\n                                title: \"خطأ في تهيئة العقود | Contract Initialization Error\",\n                                description: \"فشل في تهيئة العقود بعد عدة محاولات. يرجى التأكد من اتصال المحفظة والشبكة الصحيحة | Failed to initialize contracts after several attempts. Please check your wallet connection and network.\",\n                                status: \"error\",\n                                duration: 5000,\n                                isClosable: true\n                            });\n                        }\n                    }\n                }\n                // Reset attempts on successful initialization\n                if (initializationAttempts > 0) {\n                    setInitializationAttempts(0);\n                }\n                if (isMounted) {\n                    setIsLoading(true);\n                }\n                // Check access first\n                const accessGranted = await checkAccess(address);\n                console.log(\"Access check result:\", accessGranted);\n                if (!isMounted) return;\n                if (accessGranted) {\n                    setHasAccess(accessGranted);\n                }\n                if (!accessGranted) {\n                    setIsLoading(false);\n                    setIsInitialized(false);\n                    return;\n                }\n                // Load data only if access is granted\n                const [institutionData, examsData, certificatesData] = await Promise.all([\n                    loadInstitutionFromContract(address),\n                    loadExamsFromContract(address),\n                    loadCertificatesFromContract(address)\n                ]);\n                if (!isMounted) return;\n                if (institutionData) {\n                    setInstitution(institutionData);\n                    setIsInitialized(true);\n                } else {\n                    console.error(\"Failed to load institution data\");\n                    setIsInitialized(false);\n                }\n                if (examsData) {\n                    setExams(examsData);\n                }\n                if (certificatesData) {\n                    setCertificates(certificatesData);\n                }\n            } catch (error) {\n                console.error(\"Critical initialization error:\", {\n                    error: error instanceof Error ? {\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    } : \"Unknown error\",\n                    state: {\n                        address,\n                        contractStatus: {\n                            hasExamContract: !!examManagementContract,\n                            hasCertificatesContract: !!certificatesContract,\n                            isInitialized: contractsInitialized,\n                            isLoading: contractsLoading\n                        }\n                    }\n                });\n                if (isMounted) {\n                    setIsInitialized(false);\n                    setHasAccess(false);\n                    toast({\n                        title: \"خطأ في تهيئة البيانات | Data Initialization Error\",\n                        description: error instanceof Error ? \"\".concat(error.message, \" | يرجى المحاولة مرة أخرى\") : \"حدث خطأ غير معروف | An unknown error occurred\",\n                        status: \"error\",\n                        duration: 5000,\n                        isClosable: true\n                    });\n                }\n            } finally{\n                if (isMounted) {\n                    setIsLoading(false);\n                }\n            }\n        };\n        initializeData();\n        return ()=>{\n            isMounted = false;\n            if (initTimeout) {\n                clearTimeout(initTimeout);\n            }\n        };\n    }, [\n        isConnected,\n        address,\n        examManagementContract,\n        certificatesContract,\n        contractsInitialized,\n        contractsLoading,\n        initializationAttempts,\n        toast\n    ]);\n    // Helper functions with proper type checking\n    const loadInstitutionFromContract = async (userAddress)=>{\n        if (!examManagementContract || !userAddress) return null;\n        try {\n            const data = await examManagementContract.getInstitution(userAddress);\n            return {\n                name: data.name,\n                ministry: data.ministry,\n                university: data.university,\n                college: data.college,\n                description: data.description,\n                imageUrl: data.imageUrl,\n                website: data.website,\n                email: data.email,\n                phone: data.phone\n            };\n        } catch (error) {\n            console.error(\"Error loading institution:\", error);\n            return null;\n        }\n    };\n    const loadExamsFromContract = async (userAddress)=>{\n        if (!examManagementContract || !userAddress) {\n            return [];\n        }\n        try {\n            return await examManagementContract.getInstitutionExams(userAddress);\n        } catch (error) {\n            console.error(\"Error loading exams:\", error);\n            return [];\n        }\n    };\n    const loadCertificatesFromContract = async (userAddress)=>{\n        if (!certificatesContract || !userAddress) {\n            return [];\n        }\n        try {\n            return await certificatesContract.getInstitutionCertificates(userAddress);\n        } catch (error) {\n            console.error(\"Error loading certificates:\", error);\n            return [];\n        }\n    };\n    const createExam = async (exam)=>{\n        if (!address) {\n            toast({\n                title: \"خطأ في العنوان | Address Error\",\n                description: \"لم يتم العثور على عنوان المحفظة | Wallet address not found\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        }\n        try {\n            setIsLoading(true);\n            const contract = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getContract)();\n            const tx = await contract.createExam(exam.title, exam.description, exam.date);\n            await tx.wait();\n            await loadExamsFromContract(address);\n            return true;\n        } catch (err) {\n            console.error(\"Error creating exam:\", err);\n            toast({\n                title: \"Error creating exam\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const updateExamStatus = async (examId, status)=>{\n        if (!address) {\n            toast({\n                title: \"خطأ في العنوان | Address Error\",\n                description: \"لم يتم العثور على عنوان المحفظة | Wallet address not found\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        }\n        try {\n            setIsLoading(true);\n            const contract = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getContract)();\n            const tx = await contract.updateExamStatus(examId, status);\n            await tx.wait();\n            await loadExamsFromContract(address);\n            return true;\n        } catch (err) {\n            console.error(\"Error updating exam status:\", err);\n            toast({\n                title: \"Error updating exam status\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const registerStudents = async (examId, students)=>{\n        try {\n            setIsLoading(true);\n            const contract = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getContract)();\n            const tx = await contract.registerStudents(examId, students);\n            await tx.wait();\n            return true;\n        } catch (err) {\n            console.error(\"Error registering students:\", err);\n            toast({\n                title: \"Error registering students\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const handleSubmitResults = async (examId, results)=>{\n        try {\n            setIsLoading(true);\n            const contract = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getContract)();\n            const tx = await contract.submitResults(examId, results);\n            await tx.wait();\n            await loadExamResults(examId);\n            toast({\n                title: \"تم إضافة النتائج بنجاح | Results submitted successfully\",\n                status: \"success\",\n                duration: 3000\n            });\n            return true;\n        } catch (err) {\n            console.error(\"Error submitting results:\", err);\n            toast({\n                title: \"حدث خطأ | Error occurred\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const loadExamResults = async (examId)=>{\n        try {\n            const currentExam = exams.find((exam)=>exam.id === examId);\n            if (!currentExam) {\n                throw new Error(\"Exam not found\");\n            }\n            const examResultsList = await Promise.all(currentExam.students.map(async (studentId)=>{\n                try {\n                    const result = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getExamResult)(examId, studentId);\n                    return result;\n                } catch (e) {\n                    return null;\n                }\n            }));\n            const validResults = examResultsList.filter((result)=>result !== null);\n            setSelectedExamResults(validResults);\n            if (validResults.length === 0) {\n                setExamStatistics(null);\n                return;\n            }\n            // Calculate statistics\n            const totalStudents = validResults.length;\n            const passingStudents = validResults.filter((result)=>result.score >= 60).length;\n            const totalScore = validResults.reduce((sum, result)=>sum + result.score, 0);\n            const gradeCount = {\n                A: validResults.filter((result)=>result.grade === \"A\").length,\n                B: validResults.filter((result)=>result.grade === \"B\").length,\n                C: validResults.filter((result)=>result.grade === \"C\").length,\n                D: validResults.filter((result)=>result.grade === \"D\").length,\n                F: validResults.filter((result)=>result.grade === \"F\").length\n            };\n            const mostCommonGrade = Object.entries(gradeCount).reduce((a, b)=>a[1] > b[1] ? a : b)[0];\n            setExamStatistics({\n                totalStudents,\n                passingCount: passingStudents,\n                aCount: gradeCount.A,\n                bCount: gradeCount.B,\n                cCount: gradeCount.C,\n                dCount: gradeCount.D,\n                fCount: gradeCount.F,\n                averageScore: totalScore / totalStudents,\n                passRate: passingStudents * 100 / totalStudents,\n                mostCommonGrade\n            });\n        } catch (err) {\n            console.error(\"Error loading exam results:\", err);\n            toast({\n                title: \"Error loading results\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n        }\n    };\n    const handleEnrollStudent = async (examId, studentAddress)=>{\n        if (!address) {\n            toast({\n                title: \"خطأ في العنوان | Address Error\",\n                description: \"لم يتم العثور على عنوان المحفظة | Wallet address not found\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        }\n        try {\n            setIsLoading(true);\n            await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.enrollStudent)(examId, studentAddress);\n            toast({\n                title: \"Student enrolled successfully\",\n                status: \"success\",\n                duration: 3000\n            });\n            await loadExamsFromContract(address);\n            return true;\n        } catch (err) {\n            console.error(\"Error enrolling student:\", err);\n            toast({\n                title: \"Error enrolling student\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const issueCertificate = async (studentAddress, certificate)=>{\n        if (!address) {\n            toast({\n                title: \"خطأ في العنوان | Address Error\",\n                description: \"لم يتم العثور على عنوان المحفظة | Wallet address not found\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        }\n        try {\n            setIsLoading(true);\n            const contract = await (0,_utilsFront_contracts__WEBPACK_IMPORTED_MODULE_1__.getContract)();\n            const tx = await contract.issueCertificate(studentAddress, certificate.title, certificate.description);\n            await tx.wait();\n            await loadCertificatesFromContract(address);\n            toast({\n                title: \"Certificate issued successfully\",\n                status: \"success\",\n                duration: 3000\n            });\n            return true;\n        } catch (err) {\n            console.error(\"Error issuing certificate:\", err);\n            toast({\n                title: \"Error issuing certificate\",\n                description: err instanceof Error ? err.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 3000\n            });\n            return false;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    const saveInstitutionProfile = async (data)=>{\n        if (!examManagementContract || !address) {\n            throw new Error(\"Contract or address not available\");\n        }\n        // Validate required fields\n        if (!data.name || !data.ministry || !data.university || !data.college || !data.description || !data.imageUrl || !data.website || !data.email || !data.phone) {\n            throw new Error(\"جميع الحقول مطلوبة | All fields are required\");\n        }\n        try {\n            setIsLoading(true);\n            const tx = await examManagementContract.write.updateInstitutionProfile({\n                args: [\n                    data.name,\n                    data.ministry,\n                    data.university,\n                    data.college,\n                    data.description,\n                    data.imageUrl || \"\",\n                    data.website || \"\",\n                    data.email || \"\",\n                    data.phone || \"\"\n                ]\n            });\n            await tx.wait();\n            setInstitution(data);\n            toast({\n                title: \"تم الحفظ بنجاح | Saved Successfully\",\n                status: \"success\",\n                duration: 3000,\n                isClosable: true\n            });\n        } catch (error) {\n            console.error(\"Error saving institution profile:\", error);\n            toast({\n                title: \"خطأ في الحفظ | Error Saving\",\n                description: error instanceof Error ? error.message : \"An unknown error occurred\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true\n            });\n            throw error;\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    return {\n        institution,\n        exams,\n        certificates,\n        isLoading,\n        isInitialized,\n        hasAccess,\n        selectedExamResults,\n        examStatistics,\n        saveInstitutionProfile,\n        createExam,\n        updateExamStatus,\n        registerStudents,\n        handleSubmitResults,\n        handleEnrollStudent,\n        loadExamResults,\n        issueCertificate\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./hooks/useInstitution.ts\n"));

/***/ })

});